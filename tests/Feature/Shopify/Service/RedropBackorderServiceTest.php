<?php
namespace Tests\Feature\Shopify\Service;

use App\Models\Order;
use App\Models\OrderItem;
use App\User;
use Illuminate\Contracts\Container\BindingResolutionException;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\Sequence;
use Illuminate\Database\Eloquent\Model;
use Tests\Feature\MES\MesTestCase;
use \App\Shopify\Services\RedropBackorderService;

/**
 * Class RedropBackorderServiceTest
 * @package Tests\Feature\Shopify\Service
 *
 * @category WMG
 * @package  WMG
 * @author   Dinesh Haria <dinesh.haria@wmg.com>
 * @license  WMG License 2021
 * @link     http://www.wmg.com
 */
class RedropBackorderServiceTest extends MesTestCase
{

    /**
     * @var RedropBackorderService
     */
    private $redropService;

    /**
     * @throws BindingResolutionException
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setTestService();

        $this->redropService = $this->app->make(RedropBackorderService::class);
    }

    /**
     * setTestService
     * @SuppressWarnings(PHPMD)
     */
    protected function setTestService()
    {
        $user = User::factory()->create();
        //Register services
        $service = [
            "app_id" => "shopify",
            "app_url" => "https://wmg-sandbox.myshopify.com",
            "name" => "shopify",
            "client" => "shopify.restful",
            "events" => ["*"],
            "event_rules" => [],
            "addition" => [
                "shop_url" => "http://shopify.test",
                "api_key" => "developer",
                "password" => "password1"
            ]
        ];

        $response = $this->actingAs($user, 'api')->json('POST', 'api/1.0/service', $service);
        $response->assertStatus(200);
    }

    /**
     * setTestOrders
     * @return Collection|Model
     */
    public function setTestOrders($orderId)
    {
        return Order::factory()->count(1)->create(
            ['order_id' => $orderId]
        )->each(
            fn($order) => $order->orderItems()->saveMany(
                OrderItem::factory()->count(2)
                    ->state(
                        new Sequence(
                            ['sku' => '0010467410823'],
                            ['sku' => '0030633337921'],
                        )
                    )
                    ->make([
                        'item_type' => OrderItem::PRODUCT_TYPE_PHYSICAL,
                    ])
            )
        );
    }

    public function testGetFulfillmentOrdersToRedropBySku()
    {
        $orderId = 1;
        $orders = $this->setTestOrders($orderId);
        $this->shipmentFaker->fake($orders, 0);

        $this->redropService->getFulfillmentOrdersToRedropBySku(['0010467410823']);
    }
}
